buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.pucmm.sistema-alquiler-springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8


jar{
	manifest{
		attributes "Main-Class":"com.pucmm.sistemaalquilerspringboot.sistemaalquiler.SistemaDeAlquilerApplication"
	}
	from {
		configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
	}
}

task fatJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'com.pucmm.sistemaalquilerspringboot.sistemaalquiler.SistemaDeAlquilerApplication'
	}
	baseName = 'all-in-one-jar'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
	compile 'org.webjars.bower:select2:4.0.6-rc.1'
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	//módulo para trabajar con Spring session.
	compile('org.springframework.session:spring-session-core')
	//módulo para trabajar con Hazelcast.
	compile('org.springframework.session:spring-session-hazelcast')
}
